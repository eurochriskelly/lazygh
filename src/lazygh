#!/bin/bash

issue_number=""
export REPO_DIR="@@REPO_DIR@@"

function list_issues {
	clear
	local issue_number=$1
	# echo in yellow "List of issues:"
  echo -e "\033[35mLAZYGH: branch/$(git rev-parse --abbrev-ref HEAD)\033[0m"
  echo -e "  \033[33mList of github issues:\033[0m"
  echo ""
	gh issue list --limit 100 --json number,title |
		jq -r '.[] | "#\(.number) \(.title)"' |
		while read -r line; do
			number_part=$(echo "$line" |
				grep -o '^#[0-9]\+')
			text_part=$(echo "$line" |
				sed -E "s/^#[0-9]+ //")
			# Format number to be #001
			formatted_number=$(printf "#%03d" $(echo "$number_part" | tr -d '#'))

			# Determine the color based on issue_number
			if [ "$number_part" == "#$issue_number" ]; then
				color_code="\033[35m" # Magenta
			else
				color_code="\033[36m" # Grey
			fi

			# Print with the selected color
			echo -e "  ${color_code}${formatted_number}\033[0m $text_part"
		done
	echo -e "\n"
}

function handle_selection {
  node $REPO_DIR/src/menu.js Select checKout Create cLose cOmment Edit Info Filter Download
	read -n1 action
	echo ""
	case $action in
	S | s)
		echo -en "\033[34mIssue #: \033[0m"
		read issue_number
		;;
	C | c)
		gh issue create
		;;
	D | d)
    echo "Downloading issues..."
    topgit=$(git rev-parse --show-toplevel)
    if [ -d "$topgit/.gh/issues" ]; then
      echo "Removing existing issues..."
      rm -rf "$topgit/.gh/issues"
    fi
    gh issue list --limit 100 --json number,title |
      jq -r '.[] | "\(.number)"' |
      while read -r issue;do
        mkdir -p "$topgit/.gh/issues"
        filename="${issue}-$(gh issue view "$issue" --json title -q '.title' | tr '[:upper:]' '[:lower:]' | tr ' ' '-')".md
        echo "Downloading issue $issue to $filename"
        gh issue view "$issue" --json body -q '.body' > "$topgit/.gh/issues/$filename"
      done
      ls -l "$topgit/.gh/issues"
		;;
	L | l)
		gh issue close "$issue_number"
		;;
	K | k)
    if [ -z "$issue_number" ]; then
      echo -en "\033[31mIssue number is not set\033[0m"
    else
      newbranch="${issue_number}-$(gh issue view "$issue_number" --json title -q '.title' | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
      git fetch --all
      rbranch=$(git branch -a|grep "remotes/origin/${issue_number}-"|awk -F"remotes/origin/" '{print $2 }')
      if [ -n "$rbranch" ]; then
        echo "Checking out existing remote branch [$rbanch]"
        git checkout $rbranch
      else
        echo "Creating new branch [$newbanch]"
        git checkout -b $newbranch
      fi
    fi
		;;
	O | o)
		gh issue comment "$issue_number"
		;;
	E | e)
		gh issue edit "$issue_number"
		;;
	I | i)
		gh issue view "$issue_number" | less -R
		;;
	q | Q | x | X)
		exit 0
		;;
	*)
		echo "Invalid selection"
		;;
	esac
}

detect_issue_number() {
	# Get the current branch name
	local branch_name=$(git rev-parse --abbrev-ref HEAD)

	# Check if the branch is 'main'
	if [ "$branch_name" == "main" ]; then
		issue_number=""
	else
		# Extract the issue number from the branch name
		issue_number=$(echo "$branch_name" | grep -oE '^[0-9]+')
	fi

	# Output the result
	echo "Issue number: $issue_number"
}

detect_issue_number

while true; do
	list_issues $issue_number
	handle_selection
	sleep 2
done
